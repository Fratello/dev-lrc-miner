{$DEFINE SMART}
{$include_once SRL-GLX-master/SRL-GLX-master/Setup.simba}

const
  SMART_CLIENT_WIDTH  = 800; // X-Axis, Horizontal
  SMART_CLIENT_HEIGHT = 600; // Y-Axis, Vertical

  // Middle point coordinates of the client.
  // ( Represents where the character is standing with respect to client )
  MID_CLIENT := Point(Floor(SMART_CLIENT_WIDTH / 2), Floor(SMART_CLIENT_HEIGHT / 2));

const
  BANK_ID = 1113074985; // The deposit pully model ID
  BANK_CHOOSE_OPTS := ['Deposit Pulley lift'];
  BANK_USE_ORE_OPTS := ['UseCoal->Pulleylift', 'UseGoldore->Pulleylift',
                        'Use Coal -> Pulley lift', 'Use Gold ore -> Pulley lift'];

const
  DEPO_INV_POUCH_TEXTURE_ID = 39780;
  DEPO_INV_POUCH_TEXTURE_COL_ID = 2766353;
  DEPO_INV_POUCH_TEXTURE_FULL_COL_ID = 3025423;
  DEPO_INV_POUCH_TEXTURE_BOUNDS := IntToBox(0, 0, 27, 20);
// bitmap of depo inv pouch -> BitmapFromString(26, 19, 'meJx9lMtKw0AUhl2IoLYJmIXVStWIpd6gtrF4q4oaEcRIvSCIWnAluBDEjYgLcenKB1DwRXwSH8Yv/jAOSSr8DCdn5nz9z1y6tVQ+DGfPouDqOEPdPT1otPVa2n9hHL/4sEVmcPUm77hmfbg4crA5cbpbOd+bSghO73DgTkXiiCksGtq8RwQje48AVbJW9QBGzWJro5SQaPkBv9C8EkE0IFjy6m1+iCkyckhJUPGWZ7ydIClQLEbQYMqGaBDI9I0v5vwtBJbZeKXjzvu5RiXXnMvbEsqrHcVjvS0gBkSjNaa6+srMjkW32oR4WRYNFOXMQtBPU0uGGA7SjpGfvnxCosV70oHGyu3yCYHaoTW1zCgUPhfu3taf3+WNDChqM2lUMSoGqN0m0Ilgjwyurj+/ag/vMWrA/4fmhDkj2cOtAfKpnSQDSrOZpyBC+L2BCORNQN0K3RlqCTgI8sRya9NsjlCmU0k3QUwC3RPEJ6cgGlXQbI5QGNCzMjQdATbMc1CDJMnE7TuuahMoXRIBEzShzMUzR6wbYnNMg+qRbWEsTFYTNJujiycUVZ1oZtNsGh4MhPjvXH5RCZqNMkA9SdGoFdBwbNT/3uyWjbf4odXb7Lk4Ngr1N3rTSgNl0ijNkVbmi/wjpfNpidCJI/0AcZQl6A==');

const
  ORE_TEXTURE_ID = 104295;
  ORE_TEXTURE_BOUNDS := IntToBox(0, 0, 36, 32);

  COAL_ORE_TEXTURE_COL_ID = 1380877;
  COAL_ORE_TEXTURE_FULL_COL_ID = 1314828;

  GOLD_ORE_TEXTURE_COL_ID = 2563853;
  GOLD_ORE_TEXTURE_FULL_COL_ID = 2432268;

const
  SELECTED_ORE_TEXTURE_ID = 113730; {note: same bounds apply as un-selected ores}

  SELECTED_COAL_ORE_COL_ID = 3025702;
  SELECTED_COAL_ORE_FULL_COL_ID = 3157289;

  SELECTED_GOLD_ORE_COL_ID = 4077094;
  SELECTED_GOLD_ORE_FULL_COL_ID = 4143145;

const
  CHAT_POP_UP_BUTTON_TEXTURE_ID = 142800;
  CHAT_POP_UP_BUTTON_TEXTURE_COL_ID = 7360796;
  CHAT_POP_UP_BUTTON_TEXTURE_FULL_COL_ID = 9993265;
  CHAT_POP_UP_BUTTON_BOUNDS := IntToBox(0, 0, 80, 19);

{
  All of these tiles are near the deposit area.
  These tiles should have enough buffer area to provide randomness when banking.
  These tiles should have the deposit device on screen at all times when
    fully zoomed out and facing north and the highest (birds eye view) angle.
}
const
  BANK_TILES := [Point(264, 300), Point(264, 296),
    Point(264, 292), Point(264, 288), Point(260, 288), Point(256, 288),
    Point(260, 284), Point(264, 284), Point(268, 296), Point(272, 296),
    Point(268, 292), Point(268, 300), Point(272, 300), Point(272, 296),
    Point(272, 292), Point(276, 292), Point(276, 296), Point(276, 300)];

{
  Walk paths of tiles from ore locations to bank,
    and ore locations to other ore locations.
  Paths are attempted to use most center of any given path,
    in order to allow variation during runtime.
}
const
  WALK_PATH_COAL1_TO_BANK := [];
  WALK_PATH_COAL2_TO_BANK := [];
  WALK_PATH_COAL3_TO_BANK := [];

  WALK_PATH_GOLD1_TO_BANK := [];
  WALK_PATH_GOLD2_TO_BANK := [];
  WALK_PATH_GOLD3_TO_BANK := [];

  WALK_PATH_COAL1_TO_COAL2 := [];
  WALK_PATH_COAL1_TO_COAL3 := [];
  WALK_PATH_COAL2_TO_COAL3 := [];

  WALK_PATH_GOLD1_TO_GOLD2 := [];
  WALK_PATH_GOLD1_TO_GOLD3 := [];
  WALK_PATH_GOLD2_TO_GOLD3 := [];

{
const COAL_BAG_TEXTURE_ID = 0;
const COAL_BAG_TEXTURE_COL_ID = 0;
const COAL_BAG_TEXTURE_FULL_COL_ID = 0;
const COAL_BAG_TEXTURE_BOUNDS := IntToBox(0,0,0,0);
}

// Perhaps ADD all sign of porter ID's
// Perhaps ADD lava titan/lava golem support
// Perhaps ADD aura support

var Smart: TSmart;

(*
equalDimensions
~~~~~~~~~~

.. code-block:: pascal

    function equalDimensions(a, b: TBox): Boolean;

Compares the size of 2 boxes, returns true if equal.

.. note::

    - by Le Jingle
    - Last Updated: none

Example:

.. code-block:: pascal

    if ( equalDimensions(...something...getBounds(), IntToBox(0,0,32,32) ) ) then
    begin
      WriteLn('These boxes do match! True!');
    end;

*)
function equalDimensions(a, b: TBox): Boolean;
begin
  Result := ( ( a.X2 - a.X1 = b.X2 - b.X1 ) and ( a.Y2 - a.Y1 = b.Y2 - b.Y1 ) );
end;

(*
GL_DepositBoxScreen
~~~~~~~~~~

.. code-block:: pascal

    function GL_DepositBoxScreen(): Boolean;

Determines if the 'BANK OF RUNESCAPE - DEPOSIT BOX' interface screen is open/present.
Does not currently get added/CACHED, TODO: do it!

.. note::

    - by Le Jingle
    - Last Updated: none

Example:

.. code-block:: pascal

    if ( GL_DepositBoxScreen() ) then
    begin
      WriteLn('The Deposit Box Screen interface is opened up right now! True!');
    end;

*)
function GL_DepositBoxScreen(): Boolean;
begin
  Result := Length( glGetTextures( DEPO_INV_POUCH_TEXTURE_ID ) ) = 1;
end;

(*
GL_GenericInterfaceBounds
~~~~~~~~~~

.. code-block:: pascal

    function GL_GenericInterfaceBounds(): TBox;

Used to locate an open Interface; applies to several opened screens.
Note: Only supports having one opened generic interface at a time. Perhaps
       there's a possibility that only one may be opened at a time,
       however that is untested/unconfirmed right now.
Some information on the texture's being used:
  Top L and R:
    - ID = 57120
    - COLOURID = 1517102
    - FULLCOLOURID = 1517358
  Bottom L and R:
    - ID = 13293
    - COLOURID = 1451052
    - FULLCOLOURID = 1451052

.. note::

    - by Le Jingle
    - Last Updated: none

Example:

.. code-block:: pascal

    b := GL_GenericInterfaceBounds();
    if ( (b.X1 = -1) or (b.Y1 = -1) or (b.X2 = -1) or (b.Y2 = -1) ) then
    begin
      WriteLn('Failed to obtain the proper bounds.');
    end;

*)
function GL_GenericInterfaceBounds(): TBox;
var
  i: Integer;
  slots: glTextureArray;
begin
  Result := IntToBox( -1, -1, -1, -1 );

  slots := glGetTextures(57120); // Top L and Top R
  if ( Length( slots ) <> 2 ) then
    Exit;

  if ( slots[0].Bounds.X1 < slots[1].Bounds.X1 ) then
    Result.X1 := slots[0].Bounds.X1
  else
    Result.X1 := slots[1].Bounds.X1;
  Result.Y1 := slots[0].Bounds.Y1; // Both Y's are same value. So index 0 or 1 both work same.

  slots := glGetTextures(13293); // Bottom L and Bottom R
  if ( Length( slots ) <> 2 ) then
    Exit;

  if ( slots[0].Bounds.X2 > slots[1].Bounds.X2 ) then
    Result.X2 := slots[0].Bounds.X2
  else
    Result.X2 := slots[1].Bounds.X2;
  Result.Y2 := slots[0].Bounds.Y2; // Both Y's are same value. So index 0 or 1 both work same.
end;

(*
invFullChatBoxPopUp
~~~~~~~~~~

.. code-block:: pascal

    function invFullChatBoxPopUp(): Boolean;

Returns true if the pop up chat box for alerting the player that their inventory
has become full is present/prompts user. Uses a loop to find the right texture
because of false-positives that may appear.
Note: The debug is currently commented out.

* Possibly may need to re-work the static 80x19 box to give more tolerance to
  the shape, ex. instead of 80x19, check for [78-82]x[17-21] (all those dimensions).

.. note::

    - by Le Jingle
    - Last Updated: none

Example:

.. code-block:: pascal

    if ( invFullChatBoxPopUp() ) then
    begin
      WriteLn('The player has a full inventory!');
    end;

*)
function invFullChatBoxPopUp(): Boolean;
var
  i: Integer;
  arr: glTextureArray;
//b: TBox;
begin
  arr := glGetTextures( CHAT_POP_UP_BUTTON_TEXTURE_ID, GL_GenericInterfaceBounds() );
  if ( Length( arr ) < 1 ) then
    Exit;
  for i := 0 to High( arr ) do
  begin
    if ( equalDimensions( arr[i].Bounds, IntToBox( 0, 0, 80, 19 ) ) ) then
    begin
      Result := True;
      //b:=arr[i].bounds;
      //smart.__Graphics.DrawBox(b.x1, b.y1, b.x2, b.y2);
      Break;
    end;
  end;
end;

(*
GL_DepositBoxCountItem
~~~~~~~~~~

.. code-block:: pascal

    function GL_DepositBoxCountItem(itemTextureID, itemColID, tol: Integer): Integer;

If the deposit box screen is present; then this will attempt to locate an item
texture with it's item colour id and a tolerance level, contained within the
dimensions of the deposit box screen. Will return how many matching textures are found.

.. note::

    - by Le Jingle
    - Last Updated: none

Example:

.. code-block:: pascal

    if ( GL_DepositBoxCountItem(9001, 123456789, 0) = 0 ) then
    begin
      WriteLn('The player has an empty inventory!');
      WriteLn('Note the 9001, 123456789, and 0 are made-up numbers');
    end;

*)
function GL_DepositBoxCountItem(itemTextureID, itemColID, tol: Integer): Integer;
var
  i, count: Integer;
  depoBox: TBox;
  candidates: glTextureArray;
begin
  Result := -1;
  if ( not ( GL_DepositBoxScreen() ) ) then
    Exit;

  // should've been cached into global variable instead!!!
  depoBox := GL_GenericInterfaceBounds();

  candidates := glGetTextures(itemTextureID, itemColID, tol, depoBox);

  count := 0;

  for i := 0 to high(candidates) do
  begin
    if ( equalDimensions( candidates[i].Bounds, ORE_TEXTURE_BOUNDS ) ) then
    begin
      count := count + 1;
    end;
  end;

  Result := count;
end;

(*
openDepositScreen
~~~~~~~~~~

.. code-block:: pascal

    function openDepositScreen(): Boolean;

If a player has the deposit pulley bank on their screen, then the function
will attempt to proceed and open the deposit bank.

.. note::

    - by Le Jingle
    - Last Updated: none

Example:

.. code-block:: pascal

    if ( openDepositScreen() ) then
    begin
      WriteLn('Success @ opening the deposit screen! Time to deposit!');
    end;

*)
function openDepositScreen(): Boolean;
var t: Integer;
var arr: glModelArray;
begin
  Result := False;
  if ( GL_DepositBoxScreen() ) then
  begin
    Result := True;
    Exit;
  end;
  arr := glGetModels( BANK_ID );
  if ( Length( arr ) < 1 ) then
    Exit;
  if ( Length( arr ) = 1 ) then
  begin
    Mouse(arr[0].X, arr[0].Y, Random(-20, 20), Random(-20, 20), Mouse_Right);
    GL_ChooseOption(BANK_CHOOSE_OPTS, Mouse_Left);
  end;
  t := GetSystemTime() + Random(4000, 8000);
  while ( getSystemTime() < t ) do
  begin
    Result := GL_DepositBoxScreen();
    if ( Result ) then
      Break;
    Wait( 40 + Random( 40 ) );
  end;
end;

(*
quickDepositScreen
~~~~~~~~~~

.. code-block:: pascal

    function quickDepositScreen(): Boolean;

This is the deposit screen for when an item is selected and then the item is
clicked directly on the deposit pully. Shortly afterwards, there should be a pop
up chat box for quickly depositing items, and several options to pick how many to
deposit (note, amount of options vary depending on items currently being held,
and there is no pop up for depositing a single item - and no other items of the
exact same name/look/texture/color/etc. are present).

note: the amount varies => ex. only 2 appear when have 2 items, more for more , etc.
      BUT, nothing at all appears for 1 item, so count based off of the invent instead.

Cache the bounds for the chat box area too?
or maybe not because the same exact id's find the chat + deposit screen
(wouldnt want to use 1 box for 2 diff boxes locations/bounds)

.. note::

    - by Le Jingle
    - Last Updated: none

Example:

.. code-block:: pascal

    if ( quickDepositScreen() ) then
    begin
      WriteLn('Currently in the quick deposit screen!');
    end;

*)
function quickDepositScreen(): Boolean;
const
  depo_quant = 65800; // the options with amounts to quickly deposit that shows up within the chat box,
var
  b: TBox;
begin
  Result := False;
  b := GL_GenericInterfaceBounds();
  Result := Length(glGetTextures(depo_quant, b)) >= 2;
end;

(*
openQuickDepositScreen
~~~~~~~~~~

.. code-block:: pascal

    function openQuickDepositScreen(): Boolean;

Attempts to open the deposit screen for quick-deposit by, 1. selecting an ore
from the inventory (based from the generic coal/gold ore texture id), 2.
waiting for an ore-based item to be selected in the inventory, and 3. using the
selected item to right click on the deposit pulley.

.. note::

    - by Le Jingle
    - Last Updated: none

Example:

.. code-block:: pascal

    if ( openQuickDepositScreen() ) then
    begin
      WriteLn('Success @ opening the quick deposit screen! Time to quickly deposit!');
    end;

*)
function openQuickDepositScreen(): Boolean;
var
  t, t2, choosenItemIndex: Integer;
  arr: glModelArray;
  z: glTextureArray;
begin
  Result := False;
  if ( quickDepositScreen() ) then
  begin
    Result := True;
    Exit;
  end;
  t := getSystemTime() + Random(12000, 24000);
  while ( getSystemTime() < t ) do
  begin
    z := glGetTextures( ORE_TEXTURE_ID, GL_InvBounds() );
    if ( Length( z ) < 1 ) then
      Exit;
    choosenItemIndex := Random(0, High(z));
    Mouse(z[choosenItemIndex].X,
          z[choosenItemIndex].Y, Random(-10, 10), Random(-10, 10), Mouse_Left);
    t2 := getSystemTime() + Random(4000, 8000);
    while ( getSystemTime() < t2 ) do
    begin
      Wait( 40 + Random( 40 ) );
      if ( Length( glGetTextures( SELECTED_ORE_TEXTURE_ID, GL_InvBounds() ) ) = 1 ) then
        Break;
      Mouse(z[choosenItemIndex].X,
            z[choosenItemIndex].Y, Random(-10, 10), Random(-10, 10), Mouse_Left);
    end;
    arr := glGetModels( BANK_ID );
    if ( Length( arr ) <> 1 ) then
      Exit;
    Mouse(arr[0].X, arr[0].Y, Random(-20, 20), Random(-20, 20), Mouse_Right);
    GL_ChooseOption( BANK_USE_ORE_OPTS, Mouse_Left );
    t2 := GetSystemTime() + Random(4000, 8000);
    while ( getSystemTime() < t2 ) do
    begin
      Result := quickDepositScreen();
      if ( Result ) then
        Break;
      Wait( 40 + Random( 40 ) );
    end;
    Result := quickDepositScreen();
    if ( Result ) then
      Break;
  end;
end;

(*
depositLoot
~~~~~~~~~~

.. code-block:: pascal

    procedure depositLoot();

Determines if the deposit screen or the quick deposit screen is present. Then
attempts to deposit items if either screen is open. Accounts for either of the 2
bank screens and handles both accordingly.
Note: Pre-Condition => 1 of the interfaces to deposit with must already be
      present for this method to work.

.. note::

    - by Le Jingle
    - Last Updated: none

Example:

.. code-block:: pascal

    depositLoot();

*)
procedure depositLoot();
const
  depo_quant = 65800;
var
  t, itemCount, i, currY, bestIdx: Integer;
  arr: glTextureArray;
begin
  if ( quickDepositScreen() ) then
  begin
    // Attempting to deposit items with selecting a number that correlates to chat quick deposit screen.
    // test with 1 item in inv, up to 5, then a whole inv.
    arr := glgettextures( depo_quant, GL_GenericInterfaceBounds() );
    if ( Length( arr ) = 0 ) then
      Exit; // nothing gathered, so somethings up, recode or review logic here.
    if ( Random( 2 ) = 1 ) then // Mouse option
    begin
      for i := 0 to High( arr ) do
      begin
        if ( arr[i].Bounds.Y1 > currY ) then
        begin
          currY := arr[i].Bounds.Y1;
          bestIdx := i;
        end;
      end;
      Mouse(arr[bestIdx].X, arr[bestIdx].Y, Random(-5, 5), Random(-5, 5), Mouse_Left);
      t := getSystemTime() + Random(5000, 7500);
      while ( getSystemTime() < t ) do
      begin
        if ( not ( quickDepositScreen() ) ) then
          Break; // quick depo chat box dissappeared.
      end;
    end else // Key option
    begin
      t := GetSystemTime() + Random(5000, 7500);
      while ( getSystemTime() < t ) do
      begin
        TypeSend( toString( Length( arr ) ), False ); // Uses length due to the options not using zero based indexing
        Wait( 40 + Random( 40 ) );
        if ( not ( quickDepositScreen() ) ) then
          Break; // quick depo chat box dissappeared.
      end;
    end;
  end else if ( GL_DepositBoxScreen() ) then
  begin
    // Attempting to deposit items in the detected Deposit Box screen.
    itemCount := GL_DepositBoxCountItem( ORE_TEXTURE_ID, GOLD_ORE_TEXTURE_COL_ID, 10 );
    t := getSystemTime() + Random(5000, 7500);
    while ( getSystemTime() < t ) do
    begin
      // Get Inv Item count...
      // compare to a count taken before this loop..
      // Break if the amount taken here is less than the amount taken prior to this loop, as that tells us we deposited items!
      if (GL_DepositBoxCountItem(ORE_TEXTURE_ID, GOLD_ORE_TEXTURE_COL_ID, 10) < itemCount ) then
        Break; // Item count of held items decreased
      arr := glGetTextures(DEPO_INV_POUCH_TEXTURE_ID);
      if ( Length( arr ) <> 1 ) then
      begin
        WriteLn('No deposit button found... Awk Err.');
        TerminateScript;
      end;
      Mouse(arr[0].X, arr[0].Y, Random(-5, 5), Random(-5, 5), Mouse_Left); // Click the deposit button
      // wait for items to dissappear from deposit box screen.
      Wait( 40 + Random(40) );
    end;
  end else
  begin
    WriteLn('Could not find a deposit screen to deposit loot.');
    TerminateScript;
  end;
end;

procedure handleState();
begin
end;

procedure loop();
begin
  while ( True ) do
  begin
    handleState();
  end;
end;

var b:tbox;

begin
  UseSysCache := True;
  SetupGLX(Smart, SMART_CLIENT_WIDTH, SMART_CLIENT_HEIGHT);
  if ( not ( GL_LoggedIn() ) ) then
    TerminateScript;
  ClearDebug();



  //GLDebug(1, 0, 0, 0, 0, 0, 0, Smart.Width, Smart.Height);
  //smart.__Graphics.DrawBox(b.x1, b.y1, b.x2, b.y2);
  //loop();
end.
